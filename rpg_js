<!DOCTYPE html>
<html lang="pt-BR">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>RPG JS - Batalhas √âpicas</title>
<style>
@import url('https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap');

body {
    font-family: 'MedievalSharp', cursive;
    background: radial-gradient(circle at center, #1a1a1a 0%, #0a0a0a 100%);
    color: #f0e6d2;
    display: flex;
    justify-content: center;
    padding: 20px;
    min-height: 100vh;
    background-image: url('https://i.imgur.com/fZ8y0jx.png');
    background-size: cover;
    background-position: center;
}

.container {
    width: 750px;
    background: rgba(30, 30, 30, 0.95);
    padding: 20px;
    border-radius: 15px;
    border: 2px solid #d4af37;
    box-shadow: 0px 0px 25px rgba(0, 0, 0, 0.8);
    position: relative;
    overflow: hidden;
}

h1, h2 {
    text-align: center;
    color: #d4af37;
    text-shadow: 2px 2px 4px #000;
}

button {
    padding: 10px 18px;
    margin: 5px;
    cursor: pointer;
    border: 2px solid #b8860b;
    border-radius: 8px;
    background: linear-gradient(180deg, #5c3c00, #3b2a00);
    color: #f0e6d2;
    font-weight: bold;
    transition: 0.2s;
}
button:hover { 
    background: linear-gradient(180deg, #7a5400, #4a3600);
    transform: scale(1.05);
}

#log {
    margin-top: 20px;
    height: 200px;
    overflow-y: auto;
    border: 2px solid #b8860b;
    padding: 10px;
    background-color: rgba(0, 0, 0, 0.8);
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.4em;
}

.barra { 
    width: 100%; 
    height: 22px; 
    background-color: #3b2a00; 
    border-radius: 10px; 
    margin-bottom: 5px;
    border: 1px solid #b8860b;
}
.barra-preenchida { 
    height: 100%; 
    border-radius: 10px; 
    transition: width 0.4s ease-in-out;
}
.vida { background: linear-gradient(90deg, #8b0000, #ff0000); }
.mana { background: linear-gradient(90deg, #00008b, #1e90ff); }

#status-container {
    margin-top: 20px;
    background: rgba(20, 20, 20, 0.7);
    border-radius: 10px;
    padding: 10px;
    border: 1px solid #b8860b;
    display: flex;
    justify-content: space-around;
}

.personagem, .inimigo { text-align: center; }

.personagem img, .inimigo img {
    width: 140px;
    height: 140px;
    border-radius: 10px;
    border: 2px solid #d4af37;
    object-fit: cover;
    background: #000;
}

.log-ataque-jogador { color: #00ff7f; }
.log-ataque-inimigo { color: #ffa500; }
.log-cura { color: #00ffff; }
.log-status { color: #ffff66; }

#menu-principal, #menu-ataques {
    position: absolute;
    bottom: 10px;
    left: 0;
    width: 100%;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    background: rgba(20, 20, 20, 0.85);
    border-top: 2px solid #d4af37;
    padding: 8px 0;
}

#menu-ataques button { width: 45%; }

#batalha-finalizada {
    display: none;
    text-align: center;
    margin-top: 10px;
}
#batalha-finalizada button {
    background: linear-gradient(180deg, #006400, #004d00);
    border-color: #228b22;
}
#batalha-finalizada button:hover {
    background: linear-gradient(180deg, #008000, #005f00);
}
</style>
</head>
<body>
<div class="container">
    <h1>‚öîÔ∏è RPG JS - Batalhas √âpicas ‚öîÔ∏è</h1>

    <div id="status-container">
        <div class="personagem">
            <h2>üë§ Personagem</h2>
            <img id="img-personagem" src="https://i.imgur.com/1m9Z2NL.png" alt="Personagem">
            <div id="personagem-status"></div>
        </div>
        <div class="inimigo">
            <h2>üëπ Inimigo</h2>
            <img id="img-inimigo" src="https://i.imgur.com/fug4a1I.png" alt="Inimigo">
            <div id="inimigo-status"></div>
        </div>
    </div>

    <div id="log"></div>

    <div id="menu-principal">
        <button onclick="criarPersonagem()">Criar</button>
        <button onclick="selecionarPersonagem()">Selecionar</button>
        <button onclick="verStatus()">Status</button>
        <button onclick="procurarInimigo()">Lutar</button>
        <button onclick="descansar()">Descansar</button>
        <button onclick="distribuirPontos()">Pontos</button>
        <button onclick="salvarJogo()">Salvar</button>
        <button onclick="baixarSave()">Baixar Save</button>
    </div>

    <div id="menu-ataques" style="display:none;">
        <div id="ataques"></div>
        <button onclick="voltarMenu()">‚¨ÖÔ∏è Voltar</button>
        <div id="batalha-finalizada">
            <h3>üèÜ Batalha Finalizada!</h3>
            <button onclick="terminarBatalha()">Finalizar</button>
        </div>
    </div>
</div>

<script>
class Personagem {
    constructor(nome, classe) {
        this.nome = nome;
        this.classe = classe;
        this.nivel = 1;
        this.experiencia = 0;
        this.pontosHabilidade = 0;
        this.escudoAtivo = false;

        switch(classe) {
            case "Guerreiro": this.vidaMax=120; this.manaMax=30; this.forca=15; this.agilidade=10; this.inteligencia=5; this.defesa=30; this.imagem="https://i.imgur.com/rSxScA5.png"; break;
            case "Mago": this.vidaMax=80; this.manaMax=100; this.forca=5; this.agilidade=8; this.inteligencia=20; this.defesa=15; this.imagem="https://i.imgur.com/lPmnkcg.png"; break;
            case "Paladino": this.vidaMax=150; this.manaMax=50; this.forca=12; this.agilidade=8; this.inteligencia=10; this.defesa=35; this.imagem="https://i.imgur.com/mKSWZXK.png"; break;
            case "Assassino": this.vidaMax=90; this.manaMax=40; this.forca=10; this.agilidade=20; this.inteligencia=8; this.defesa=20; this.imagem="https://i.imgur.com/EvcI6P3.png"; break;
            case "Tank": this.vidaMax=200; this.manaMax=20; this.forca=10; this.agilidade=5; this.inteligencia=5; this.defesa=45; this.imagem="https://i.imgur.com/9YtY9FJ.png"; break;
        }
        this.vida = this.vidaMax;
        this.mana = this.manaMax;
    }
    ataqueBasico(){ return this.forca*2; }
    expParaProximoNivel(){ return 100*this.nivel*this.nivel; }
    levelUp(){
        this.nivel++; this.pontosHabilidade+=5;
        log(`‚ú® ${this.nome} subiu para o n√≠vel ${this.nivel}!`, "log-status");
        autoSave();
    }
}

class Inimigo {
    constructor(nivel){
        const nomes=["Goblin","Orc","Troll","Esqueleto","Slime"];
        const imagens=[
            "https://i.imgur.com/NW4m3mT.png",
            "https://i.imgur.com/w8Ktwqv.png",
            "https://i.imgur.com/Wo3x6Xy.png",
            "https://i.imgur.com/8PjYdOE.png",
            "https://i.imgur.com/AlPMN3E.png"
        ];
        const idx=Math.floor(Math.random()*nomes.length);
        this.nome=nomes[idx];
        this.imagem=imagens[idx];
        this.nivel=nivel;
        this.vidaMax=50+nivel*10;
        this.vida=this.vidaMax;
        this.ataque=10+nivel*2;
        this.defesa=5+nivel*2;
    }
}

let personagens=[], personagemAtual=null, inimigoAtual=null;

function log(msg,classe=""){
    const logDiv=document.getElementById("log");
    logDiv.innerHTML+=`<div class="${classe}">> ${msg}</div>`;
    logDiv.scrollTop=logDiv.scrollHeight;
}

function atualizarStatus(){
    if(personagemAtual){
        document.getElementById("personagem-status").innerHTML=
            `<b>${personagemAtual.nome} (Lv ${personagemAtual.nivel})</b><br>
            <div class="barra"><div class="barra-preenchida vida" style="width:${(personagemAtual.vida/personagemAtual.vidaMax)*100}%"></div></div>
            <div class="barra"><div class="barra-preenchida mana" style="width:${(personagemAtual.mana/personagemAtual.manaMax)*100}%"></div></div>
            <b>Pontos:</b> ${personagemAtual.pontosHabilidade}`;
        document.getElementById("img-personagem").src=personagemAtual.imagem;
    }
    if(inimigoAtual){
        document.getElementById("inimigo-status").innerHTML=
            `<b>${inimigoAtual.nome} (Lv ${inimigoAtual.nivel})</b><br>
            <div class="barra"><div class="barra-preenchida vida" style="width:${(inimigoAtual.vida/inimigoAtual.vidaMax)*100}%"></div></div>`;
        document.getElementById("img-inimigo").src=inimigoAtual.imagem;
    } else {
        document.getElementById("inimigo-status").innerHTML="";
        document.getElementById("img-inimigo").src="https://i.imgur.com/fug4a1I.png";
    }
}

function criarPersonagem(){
    const nome=prompt("Digite o nome do personagem:");
    const classes=["Guerreiro","Mago","Paladino","Assassino","Tank"];
    const escolha=prompt("Escolha a classe: 1-Guerreiro 2-Mago 3-Paladino 4-Assassino 5-Tank");
    const classe=classes[parseInt(escolha)-1];
    if(!classe) return;
    const p=new Personagem(nome,classe);
    personagens.push(p);
    personagemAtual=p;
    log(`üßô ${nome} (${classe}) criado!`,"log-status");
    atualizarStatus();
    autoSave();
}

function selecionarPersonagem(){
    if(personagens.length===0){ log("Nenhum personagem dispon√≠vel."); return; }
    const lista=personagens.map((p,i)=>`${i+1}: ${p.nome} (${p.classe}) Lv ${p.nivel}`).join("\n");
    const escolha=prompt("Escolha o personagem:\n"+lista);
    personagemAtual=personagens[parseInt(escolha)-1];
    log(`üéØ ${personagemAtual.nome} selecionado!`,"log-status");
    atualizarStatus();
}

function verStatus(){
    if(!personagemAtual){ log("Nenhum personagem selecionado."); return; }
    alert(`
${personagemAtual.nome} (${personagemAtual.classe})
N√≠vel: ${personagemAtual.nivel}
HP: ${personagemAtual.vida}/${personagemAtual.vidaMax}
MP: ${personagemAtual.mana}/${personagemAtual.manaMax}
For√ßa: ${personagemAtual.forca}
Agilidade: ${personagemAtual.agilidade}
Intelig√™ncia: ${personagemAtual.inteligencia}
Defesa: ${personagemAtual.defesa}
XP: ${personagemAtual.experiencia}/${personagemAtual.expParaProximoNivel()}
Pontos: ${personagemAtual.pontosHabilidade}`);
}

function descansar(){
    if(!personagemAtual){ log("Nenhum personagem."); return; }
    personagemAtual.vida=personagemAtual.vidaMax;
    personagemAtual.mana=personagemAtual.manaMax;
    log(`üí§ ${personagemAtual.nome} descansou. HP/MP restaurados.`,"log-cura");
    atualizarStatus();
    autoSave();
}

function distribuirPontos(){
    if(!personagemAtual){ log("Nenhum personagem."); return; }
    while(personagemAtual.pontosHabilidade>0){
        const e=prompt(`Pontos: ${personagemAtual.pontosHabilidade}\n1-Vida\n2-Mana\n3-For√ßa\n4-Agilidade\n5-Intelig√™ncia\n6-Defesa`);
        switch(e){
            case"1":personagemAtual.vidaMax+=20;break;
            case"2":personagemAtual.manaMax+=10;break;
            case"3":personagemAtual.forca+=2;break;
            case"4":personagemAtual.agilidade+=2;break;
            case"5":personagemAtual.inteligencia+=2;break;
            case"6":personagemAtual.defesa+=2;break;
            default:log("Inv√°lido");continue;
        }
        personagemAtual.pontosHabilidade--;
    }
    atualizarStatus();
    autoSave();
}

function procurarInimigo(){
    if(!personagemAtual){ log("Nenhum personagem."); return; }
    inimigoAtual=new Inimigo(personagemAtual.nivel);
    log(`‚ö†Ô∏è Voc√™ encontrou um ${inimigoAtual.nome}!`,"log-status");
    menuAtaques();
    atualizarStatus();
}

function menuAtaques(){
    document.getElementById("menu-principal").style.display="none";
    document.getElementById("menu-ataques").style.display="flex";
    document.getElementById("batalha-finalizada").style.display="none";
    const aDiv=document.getElementById("ataques");
    aDiv.innerHTML="";
    const ataques=[{nome:"Ataque B√°sico",mana:0,dano:personagemAtual.ataqueBasico()}];
    switch(personagemAtual.classe){
        case"Guerreiro":ataques.push({nome:"Golpe Circular",mana:30,dano:personagemAtual.ataqueBasico()*3});break;
        case"Mago":ataques.push({nome:"Bola de Fogo",mana:20,dano:personagemAtual.inteligencia*4});break;
        case"Paladino":ataques.push({nome:"Cura Divina",mana:30,dano:0});break;
        case"Assassino":ataques.push({nome:"Ataque Furtivo",mana:25,dano:personagemAtual.agilidade*5});break;
        case"Tank":ataques.push({nome:"Escudo Protetor",mana:20,dano:0});break;
    }
    ataques.forEach(a=>{
        const b=document.createElement("button");
        b.textContent=`${a.nome} (MP:${a.mana})`;
        b.onclick=()=>realizarAtaque(a);
        aDiv.appendChild(b);
    });
}

function realizarAtaque(ataque){
    if(personagemAtual.mana<ataque.mana){ log("Mana insuficiente."); return; }
    personagemAtual.mana-=ataque.mana;
    if(ataque.nome==="Cura Divina"){
        personagemAtual.vida=Math.min(personagemAtual.vida+50,personagemAtual.vidaMax);
        log("‚ú® Cura Divina restaurou HP!","log-cura");
    } else if(ataque.nome==="Escudo Protetor"){
        personagemAtual.escudoAtivo=true;
        log("üõ°Ô∏è Escudo Protetor ativado!","log-status");
    } else {
        inimigoAtual.vida-=ataque.dano;
        log(`${personagemAtual.nome} usou ${ataque.nome} causando ${Math.round(ataque.dano)}!`,"log-ataque-jogador");
    }
    atualizarStatus();
    if(inimigoAtual.vida<=0){
        log(`üèÜ ${inimigoAtual.nome} derrotado!`,"log-status");
        personagemAtual.experiencia+=20+inimigoAtual.nivel*5;
        while(personagemAtual.experiencia>=personagemAtual.expParaProximoNivel()){
            personagemAtual.experiencia-=personagemAtual.expParaProximoNivel();
            personagemAtual.levelUp();
        }
        autoSave();
        document.getElementById("batalha-finalizada").style.display="block";
        return;
    }
    setTimeout(()=>{
        let dano=inimigoAtual.ataque-personagemAtual.defesa/2;
        if(dano<1)dano=1;
        if(personagemAtual.escudoAtivo){ dano/=2; personagemAtual.escudoAtivo=false; log("üõ°Ô∏è Escudo reduziu dano!","log-status"); }
        personagemAtual.vida-=dano;
        log(`${inimigoAtual.nome} causou ${Math.round(dano)} de dano!`,"log-ataque-inimigo");
        atualizarStatus();
        if(personagemAtual.vida<=0){ log("‚ò†Ô∏è Voc√™ foi derrotado...","log-status"); voltarMenu(); inimigoAtual=null; }
    },600);
}

function terminarBatalha(){
    log("‚úÖ Batalha encerrada.","log-status");
    inimigoAtual=null;
    voltarMenu();
    atualizarStatus();
}

function voltarMenu(){
    document.getElementById("menu-principal").style.display="flex";
    document.getElementById("menu-ataques").style.display="none";
    autoSave();
}

// ==== SALVAMENTO ====
function salvarJogo(){
    const data={personagens,indice:personagens.indexOf(personagemAtual)};
    localStorage.setItem("rpgSave",JSON.stringify(data));
    log("üíæ Jogo salvo!","log-status");
}

function carregarJogo(){
    const s=localStorage.getItem("rpgSave");
    if(!s)return;
    const data=JSON.parse(s);
    personagens=data.personagens.map(p=>Object.assign(new Personagem(p.nome,p.classe),p));
    personagemAtual=personagens[data.indice];
    atualizarStatus();
}

function autoSave(){ salvarJogo(); }

function baixarSave(){
    const data=localStorage.getItem("rpgSave");
    const blob=new Blob([data],{type:"text/plain"});
    const a=document.createElement("a");
    a.href=URL.createObjectURL(blob);
    a.download="save_rpg.txt";
    a.click();
}

carregarJogo();
</script>
</body>
</html>
